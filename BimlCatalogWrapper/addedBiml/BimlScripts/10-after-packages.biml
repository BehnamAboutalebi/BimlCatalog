<#	var isBatch = false;#>
<Biml xmlns="http://schemas.varigence.com/biml.xsd">
	<Packages>
	<#  foreach (var table in RootNode.Tables) { #>
		<Package Name="LOAD <#=table.SsisSafeScopedName#>" PackageSubpath="OrchestrationDemo" LogicalDisplayFolder="Child" >
			<Connections>
				<Connection ConnectionName="AdventureWorksLT" />
				<Connection ConnectionName="BimlStaging" />
			</Connections>
			<Variables>
				<#@ include file="90-i-pkg-variables.biml" #>
		    </Variables>
			<Tasks>
				<#@ include file="90-i-orchestration.biml" #>
				<Container Name="SEQC - Package Main" ConstraintMode="Parallel">
					<PrecedenceConstraints LogicalType="And">
			        	<Inputs>
			        		<Input OutputPathName="SEQC - Package Start.Output" EvaluationOperation="ExpressionAndConstraint" Expression="@ExecutionStatus == &quot;E&quot;||@ExecutionStatus == &quot;R&quot;" />
			        	</Inputs>
			        </PrecedenceConstraints>
					<Tasks>
						<ExecuteSQL Name="SQL - Truncate <#=table.SsisSafeScopedName#>" ConnectionName="BimlStaging">
							<DirectInput>TRUNCATE TABLE <#=table.SchemaQualifiedName#></DirectInput>
						</ExecuteSQL>
						<Dataflow Name="DFT - LOAD <#=table.SsisSafeScopedName#>">
							<PrecedenceConstraints>
					        	<Inputs>
					        		<Input OutputPathName="SQL - Truncate <#=table.SsisSafeScopedName#>.Output" />
					        	</Inputs>
					        </PrecedenceConstraints>
							<Transformations>
								<OleDbSource Name="OLE_SRC - <#=table.SsisSafeScopedName#>" ConnectionName="AdventureWorksLT">
									<DirectInput>SELECT <#=table.GetColumnList()#> FROM <#=table.GetTag("SourceSchemaQualifiedName")#></DirectInput>
								</OleDbSource>
								<!-- Add RowCount -->
								<CustomComponent Name="RC - Select <#=table.SsisSafeScopedName#>" ComponentTypeName="Varigence.Ssis.RowCount, Varigence.Ssis<#=RootNode.ObjectTag["ComponentVersion"]#>, Culture=neutral, PublicKeyToken=e9fb56b2a63ffbab">
								    <CustomProperties>
								        <CustomProperty Name="RowCountObject" DataType="String" TypeConverter=" UITypeEditor=" SupportsExpression="true"><#=table.SsisSafeScopedName#></CustomProperty>
								        <CustomProperty Name="RowCountType" DataType="Int32" TypeConverter="Varigence.Ssis.RowCountSerialize+RowCountTypeEnum, Varigence.Ssis<#=RootNode.ObjectTag["ComponentVersion"]#>, Culture=neutral, PublicKeyToken=e9fb56b2a63ffbab" UITypeEditor=""><#=TypeEditor("Select")#></CustomProperty>
						                <CustomProperty Name="RowCountSum" DataType="String" TypeConverter=" UITypeEditor=" SupportsExpression="true"><#=table.Columns.Any(c => c.Name == "LineTotal") ? "LineTotal" : ""#></CustomProperty>
								    </CustomProperties>
								    <InputPaths>
								        <InputPath OutputPathName="OLE_SRC - <#=table.SsisSafeScopedName#>.Output" HasSideEffects="true" ErrorOrTruncationOperation="" Identifier="RowCountInput"></InputPath>
								    </InputPaths>
								    <OutputPaths>
								        <OutputPath Name="Output" ErrorOrTruncationOperation="" SynchronousInput="RowCountInput" />
								    </OutputPaths>
								    <Connections>
								        <Connection ConnectionName="BimlCatalog" Name="BimlCatalog" />
								    </Connections>
								</CustomComponent>
								<DerivedColumns Name="DC - Add Audit Columns">
                                    <InputPath OutputPathName="RC - Select <#=table.SsisSafeScopedName#>.Output" />
                                    <Columns>
                                        <Column Name="RowAuditId" DataType="Int64">@[User::ExecutionID]</Column>
										<Column Name="RowStringKey" DataType="String" Length="100">(DT_WSTR,100)[<#=table.Columns.First().Name#>]</Column>
									<#	if (table.Name.Contains("SalesOrderDetail")) { #>
										<Column Name="DummyErrorColumn" DataType="DateTime">(DT_DBTIMESTAMP) ([OrderQty] >10 ?  (DT_WSTR, 20)[LineTotal] : "1900-01-01")</Column>
									<#	} #>
                                    </Columns>
									<ErrorHandling ErrorRowDisposition="RedirectRow" TruncationRowDisposition="RedirectRow" />
								</DerivedColumns>
								<!-- Add AuditRow for Error -->
								<CustomComponent Name="RA - SoftError <#=table.SsisSafeScopedName#>" ComponentTypeName="Varigence.Ssis.AuditRow, Varigence.Ssis<#=RootNode.ObjectTag["ComponentVersion"]#>, Culture=neutral, PublicKeyToken=e9fb56b2a63ffbab">
							        <CustomProperties>
							            <CustomProperty Name="AuditRowObject" DataType="String" TypeConverter="" UITypeEditor=""><#=table.SsisSafeScopedName#></CustomProperty>
							            <CustomProperty Name="AuditRowType" DataType="Int32" TypeConverter="Varigence.Ssis.AuditRowSerialize+AuditRowTypeEnum, Varigence.Ssis<#=RootNode.ObjectTag["ComponentVersion"]#>, Culture=neutral, PublicKeyToken=e9fb56b2a63ffbab" UITypeEditor=""><#=AuditTypeEditor("SoftError")#></CustomProperty>
							            <CustomProperty Name="LimitNumberOfRowsToLog" DataType="Int32" TypeConverter="System.Int32, mscorlib, <#=RootNode.ObjectTag["ComponentVersion"]#>, Culture=neutral, PublicKeyToken=b77a5c561934e089" UITypeEditor="" SupportsExpression="true">1000</CustomProperty>
							        </CustomProperties>
							        <InputPaths>
							            <InputPath OutputPathName="DC - Add Audit Columns.Error" HasSideEffects="true" ErrorOrTruncationOperation="" Identifier="AuditRowInput">
							                <InputColumns>
												<InputColumn SourceColumn="ErrorCode" />
												<InputColumn SourceColumn="ErrorColumn" />
						                    </InputColumns>
							            </InputPath>
							        </InputPaths>
							        <Connections>
							            <Connection Name="BimlCatalog" ConnectionName="BimlCatalog" />
							        </Connections>
							    </CustomComponent>
								<!-- Add SHA1 Hash for Key Column -->
								<CustomComponent Name="HSH - Row Hash <#=table.SsisSafeScopedName#>" ComponentTypeName="Varigence.Ssis.Hash, Varigence.Ssis<#=RootNode.ObjectTag["ComponentVersion"]#>, Culture=neutral, PublicKeyToken=e9fb56b2a63ffbab">
									<InputPaths>
										<InputPath Identifier="HashInput" ErrorRowDisposition="NotUsed"  OutputPathName="DC - Add Audit Columns.Output">
											<InputColumns>
												<InputColumn SourceColumn="RowStringKey" />
											</InputColumns>
							            </InputPath>
									</InputPaths>
									<OutputPaths>
										<OutputPath Name="HashOutput" SynchronousInput="HashInput" ExclusionGroup="1" ErrorRowDisposition="NotUsed">
											<OutputColumns>
												<OutputColumn  Name="RowHash" DataType="AnsiString" Length="40" CodePage="1252">
													<CustomProperties>
														<Property Name="Hash" DataType="String">Hash</Property>
													</CustomProperties>
												</OutputColumn>
											</OutputColumns>
										</OutputPath>
									</OutputPaths>
								</CustomComponent>
								<!-- Add SHA1 Sql Compatible Hash for Key Column -->
								<CustomComponent Name="HSH - Row Sql Hash <#=table.SsisSafeScopedName#>" ComponentTypeName="Varigence.Ssis.HashSql, Varigence.Ssis<#=RootNode.ObjectTag["ComponentVersion"]#>, Culture=neutral, PublicKeyToken=e9fb56b2a63ffbab">
									<CustomProperties>
	            						<CustomProperty Name="NullValue" DataType="String" TypeConverter="" UITypeEditor="">NVL</CustomProperty>
	        						</CustomProperties>
									<InputPaths>
										<InputPath Identifier="HashInput" ErrorRowDisposition="NotUsed"  OutputPathName="HSH - Row Hash <#=table.SsisSafeScopedName#>.HashOutput">
											<InputColumns>
												<InputColumn SourceColumn="RowStringKey" />
											</InputColumns>
							            </InputPath>
									</InputPaths>
									<OutputPaths>
										<OutputPath Name="HashOutput" SynchronousInput="HashInput" ExclusionGroup="1" ErrorRowDisposition="NotUsed">
											<OutputColumns>
												<OutputColumn  Name="RowSqlHash" DataType="AnsiString" Length="40" CodePage="1252">
													<CustomProperties>
														<Property Name="Hash" DataType="String">Hash</Property>
													</CustomProperties>
												</OutputColumn>
											</OutputColumns>
										</OutputPath>
									</OutputPaths>
								</CustomComponent>
								<!-- Add SHA1 Double Hash for All Columns for use when HashColison is a concern -->
								<CustomComponent Name="HSH - Row Hash Dual <#=table.SsisSafeScopedName#>" ComponentTypeName="Varigence.Ssis.HashDual, Varigence.Ssis<#=RootNode.ObjectTag["ComponentVersion"]#>, Culture=neutral, PublicKeyToken=e9fb56b2a63ffbab">
							        <InputPaths>
										<InputPath Identifier="HashDualInput" ErrorRowDisposition="NotUsed"  OutputPathName="HSH - Row Sql Hash <#=table.SsisSafeScopedName#>.HashOutput">
							                <InputColumns>
											<#	foreach(var column in table.Columns){ #>
												<InputColumn SourceColumn="<#=column.Name #>" />
											<#	} #>
											</InputColumns>
							            </InputPath>
							        </InputPaths>
							        <OutputPaths>
							            <OutputPath Name="HashDualOutput" SynchronousInput="HashDualInput" ExclusionGroup="1" ErrorRowDisposition="NotUsed">
							                <OutputColumns>
							                    <OutputColumn  Name="RowHash1" DataType="AnsiString" Length="40" CodePage="1252">
							                        <CustomProperties>
							                            <Property Name="Hash1" DataType="String">Hash1</Property>
							                        </CustomProperties>
							                    </OutputColumn>
							                    <OutputColumn Name="RowHash2" DataType="AnsiString" Length="40" CodePage="1252">
							                        <CustomProperties>
							                            <Property Name="Hash2" DataType="String">Hash2</Property>
							                        </CustomProperties>
							                    </OutputColumn>
							                </OutputColumns> 
							            </OutputPath>
							        </OutputPaths>
							    </CustomComponent>
								<DerivedColumns Name="DC - Row Hashing <#=table.SsisSafeScopedName#>">
                                    <InputPath OutputPathName="HSH - Row Hash Dual <#=table.SsisSafeScopedName#>.HashDualOutput" />
                                    <Columns>
                                        <Column Name="BimlDualRowHash" DataType="AnsiStringFixedLength" Length="80">[RowHash1]+[RowHash1]</Column>
										<Column Name="BimlRowHashKey" DataType="AnsiStringFixedLength" Length="40">[RowHash]</Column>
										<Column Name="BimlRowSqlHashKey" DataType="AnsiStringFixedLength" Length="40">[RowSqlHash]</Column>
                                    </Columns>
								</DerivedColumns>
								<!-- Add RowCount -->
								<CustomComponent Name="RC - Insert <#=table.SsisSafeScopedName#>" ComponentTypeName="Varigence.Ssis.RowCount, Varigence.Ssis<#=RootNode.ObjectTag["ComponentVersion"]#>, Culture=neutral, PublicKeyToken=e9fb56b2a63ffbab">
								    <CustomProperties>
								        <CustomProperty Name="RowCountObject" DataType="String" TypeConverter=" UITypeEditor=" SupportsExpression="true"><#=table.SsisSafeScopedName#></CustomProperty>
								        <CustomProperty Name="RowCountType" DataType="Int32" TypeConverter="Varigence.Ssis.RowCountSerialize+RowCountTypeEnum, Varigence.Ssis<#=RootNode.ObjectTag["ComponentVersion"]#>, Culture=neutral, PublicKeyToken=e9fb56b2a63ffbab" UITypeEditor=""><#=TypeEditor("Insert")#></CustomProperty>
						                <CustomProperty Name="RowCountSum" DataType="String" TypeConverter=" UITypeEditor=" SupportsExpression="true"><#=table.Columns.Any(c => c.Name == "LineTotal") ? "LineTotal" : ""#></CustomProperty>
								    </CustomProperties>
								    <InputPaths>
								        <InputPath OutputPathName="DC - Row Hashing <#=table.SsisSafeScopedName#>.Output" HasSideEffects="true" ErrorOrTruncationOperation="" Identifier="RowCountInput"></InputPath>
								    </InputPaths>
								    <OutputPaths>
								        <OutputPath Name="Output" ErrorOrTruncationOperation="" SynchronousInput="RowCountInput" />
								    </OutputPaths>
								    <Connections>
								        <Connection ConnectionName="BimlCatalog" Name="BimlCatalog" />
								    </Connections>
								</CustomComponent>
								<OleDbDestination Name="OLE_DST - <#=table.SsisSafeScopedName#>" ConnectionName="BimlStaging">
									<InputPath OutputPathName="RC - Insert <#=table.SsisSafeScopedName#>.Output" />
									<TableOutput TableName="<#=table.ScopedName#>" />
								</OleDbDestination>
							</Transformations>
	                	</Dataflow>
					</Tasks>
				</Container>
				<#@ include file="90-i-orchestration-end.biml" #>
            </Tasks>
			<#@ include file="90-i-logging.biml" #>
			<#@ include file="90-i-orchestration-onerror.biml" #>
		</Package>
        <# } #>
    </Packages>
</Biml>

<#+
public static string TypeEditor(string process)
{
    var tempProcess = process.ToUpper();
    var typeEditor = 1;
    switch (tempProcess)
    {
        case "SELECT":
            typeEditor = 1;
            break;
        case "INSERT":
            typeEditor = 2;
            break;
        case "UPDATE":
            typeEditor = 3;
            break;
        case "DELETE":
            typeEditor = 4;
            break;
        case "UNAFFECTED":
            typeEditor = 5;
            break;
        case "INTERMEDIATE":
            typeEditor = 6;
            break;
        case "ERROR":
            typeEditor = 7;
            break;
        case "EXCEPTION":
            typeEditor = 8;
            break;
        case "CONTROL":
            typeEditor = 9;
            break;
    }
    return typeEditor.ToString();
}

public static string AuditTypeEditor(string process)
{
    var tempProcess = process.ToUpper();
    var typeEditor = 1;
    switch (tempProcess)
    {
        case "UNKNOWN":
            typeEditor = 0;
            break;
        case "HARDERROR":
            typeEditor = 1;
            break;
        case "SOFTERROR":
            typeEditor = 2;
            break;
        case "WARNING":
            typeEditor = 3;
            break;
        case "INFERREDMEMBER":
            typeEditor = 4;
            break;
        case "INFORMATION":
            typeEditor = 5;
            break;
        case "DEBUG":
            typeEditor = 6;
            break;
    }

    return typeEditor.ToString();
}

#>

<#@ template language="C#" hostspecific="True" tier="5"#>